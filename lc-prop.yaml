openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/LiquidCitizen/lc-prop/1.0
  - url: 'https://virtserver.swaggerhub.com/LiquidCitizen/lc-prop/1.0.0'
info:
  description: The Proposition Service in the Liquid Citizen Project
  version: "1.0"
  title: Proposition service
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /createProposition/:
    post:
      summary: Creates a new proposition (group)
      operationId: createProposition
      description: |
        Creates a new proposition according to the parameters transmitted, as well as the proposition group alternative propositions to the newly created proposition will belong to.
      parameters:
      - name: propositionId
        in: path
        description: ID of the proposition to vote for
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteTokenRequest'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteTokenResponse'
        '400':
          description: all errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /evaluateVote/{propositionId}:
    post:
      summary: Prepares vote counting
      operationId: evaluateVote
      description: |
        Prepares a vote for a given proposition for vote counting by determining the optionToken and votePowerToken, so the calling entity can determine the semantics of the vote within the vote counting
      parameters:
      - name: propositionId
        in: path
        description: ID of the proposition to vote for
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateVoteRequest'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateVoteResponse'
        '400':
          description: all errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ErrorResponse:
      type: object
      required:
        - code
        - description
      properties:
        code:
          type: number
          example: 0
        description:
          type: string
          description: error description
    VoteTokenRequest:
      type: object
      required:
        - DT
        - OTS
      properties:
        DT:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        OTS:
          type: string
          format: byte
          description: RSA key
    VoteTokenResponse:
      type: object
      required:
        - DT
        - OTS
      properties:
        VT:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        POO:
          type: string
          format: byte
          description: AES secret
    EvaluateVoteRequest:
      type: object
      required:
        - VT
        - SLO
      properties:
        VT:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        SLO:
          type: string
          format: byte
          description: Second layer option token
    EvaluateVoteResponse:
      type: object
      required:
        - O
        - VPT
      properties:
        O:
          type: string
          format: byte
          description: Option token
        VPT:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          description: Vote power token