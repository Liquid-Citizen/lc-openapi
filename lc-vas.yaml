openapi: 3.0.0
info:
  description: The VAS in the Liquid Citizen Project
  version: 1.0.0
  title: Vote Authentication Service
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
components:
  schemas:
    VoteTokenRequest:
      type: object
      required:
        - DT
        - OTS
      properties:
        DT:
          $ref: './lc-common.yaml#/components/schemas/Token'
        OTS:
          $ref: './lc-common.yaml#/components/schemas/OTS'
    VoteTokenResponse:
      type: object
      required:
        - DT
        - OTS
      properties:
        VT:
          $ref: './lc-common.yaml#/components/schemas/Token'
        POO:
          $ref: './lc-common.yaml#/components/schemas/POO'
    EvaluateVoteRequest:
      type: object
      required:
        - VT
        - SLO
      properties:
        VT:
          $ref: './lc-common.yaml#/components/schemas/Token'
        SLO:
          $ref: './lc-common.yaml#/components/schemas/HashedToken'
    EvaluateVoteResponse:
      type: object
      required:
        - OT
        - VPT
      properties:
        OT:
          $ref: './lc-common.yaml#/components/schemas/Token'
        VPT:
          $ref: './lc-common.yaml#/components/schemas/Token'
paths:
  /registerForVote/{propositionId}:
    post:
      summary: Issues a vote token together with a POO
      operationId: registerForVote
      description: |
        Issues a vote token together with a POO
      parameters:
      - $ref: './lc-common.yaml#/components/parameters/propId'
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoteTokenRequest'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoteTokenResponse'
        '400':
          $ref: './lc-common.yaml#/components/responses/error'
  /evaluateVote/{propositionId}:
    post:
      summary: Prepares vote counting
      operationId: evaluateVote
      description: |
        Prepares a vote for a given proposition for vote counting by determining the optionToken and votePowerToken, so the calling entity can determine the semantics of the vote within the vote counting
      parameters:
      $ref: './lc-common.yaml#/components/parameters/propId'
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluateVoteRequest'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluateVoteResponse'
        '400':
          $ref: './lc-common.yaml#/components/responses/error'